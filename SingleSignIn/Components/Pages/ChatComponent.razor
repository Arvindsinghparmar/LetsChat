@page "/chat"
@inject IChatService ChatService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Let's Chat</PageTitle>
<div class="chat-container">
    <div class="message-container">
        <div class="message-list" style="max-height: 300px; overflow-y: auto; margin-inline-end: -13px;">
            @foreach (var message in messages)
            {
                <div class="message">
                    <strong>@message.Username:</strong> @message.Content:@message.UType
                </div>
            }
        </div>
        <div class="input-area">
            <input type="text" class="form-control" @bind="username" placeholder="Your Name" />
            <input type="text" class="form-control" @bind="messageInput" @onkeyup="HandleKeyUp" placeholder="Type a message" />
            <select class="form-control" @bind="UType">
                <option value="">Select Type</option>
                <option value="Admin">Admin</option>
                <option value="User">User</option>
            </select>
            <button class="btn btn-primary" @onclick="SendMessage">Send</button>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> messages = new();
    private string username = "";
    private string messageInput = "";
    private string UType = "";

    protected override async Task OnInitializedAsync()
    {
        await ChatService.InitializeHubConnection();

        ChatService.OnReceiveMessage += (user, message, utype) =>
        {
            var newMessage = new ChatMessage(user, message, utype);
            messages.Add(newMessage);
            InvokeAsync(StateHasChanged);
        };
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(messageInput) && !string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(UType))
        {
            await ChatService.SendMessage(username, messageInput, UType);
            messageInput = string.Empty;
            UType = string.Empty;
        }
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
}